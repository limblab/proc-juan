

function stdata = call_get_single_trial_data( bdf, varargin )

% Default parameters
params                  = struct('pca_neural',      true, ...
                                'neural_chs',       [], ...
                                'pca_emgs',         false, ...
                                'chosen_emgs',      [], ...
                                'data_pca',         'trial-related', ...
                                'bin_size',         0.02, ...
                                'kernel_SD',        0.05, ...
                                'transform',        'sqrt', ...
                                'norm_data',        true, ...
                                'w_i',           	'ot_on', ...
                                'w_f',              'R', ...
                                'norm_trial_data',  'min_dur', ... % 'min_dur', 't_warp'
                                'label',            'iso8');
                            
% read input parameters and replace default values where necessary
param_names         = fieldnames(params);
for p = reshape(varargin,2,[])
    if any(strcmp(p{1},param_names))
        params.(p{1}) = p{2};
    else
        error([p{1} ' is not a recognized parameter name']);
    end
end


[sfr, bd]           = gaussian_smoothing( ...
                        bdf, ...
                        params.transform, ...
                        params.bin_size, ...
                        params.kernel_SD );


% Do we want to do dimensionality reduction of the neurons?
if params.pca_neural


    % see if we want to do PCA of the continuous data or the trial-related
    % data
    switch params.data_pca
        case 'all'
            
            error('to be implemented');
            
        case 'trial-related'
            
        % split the data in single trials
        stdata      = get_single_trial_data( bd, ...
                            {params.label}, ...
                            params.neural_chs, ...
                            params.chosen_emgs, ...
                            params.norm_trial_data, ...
                            params.w_i, ...
                            params.w_f );
                        
        % do PCA of the neural data
        
        % concatenate the firing rates to do PCA
        stdata          = concatenate_single_trials( stdata );
        % get concatenated smoothed FRs, and add time as first
        % variable --for compatibility with the PCA code
        sfr             = [stdata.target{end}.conc_t', ...
                            stdata.target{end}.neural_data.conc_smoothed_fr];
        % Do PCA on the neural data
        dim_red_FR      = dim_reduction( ...
                            sfr, ...
                            'pca', ...
                            [], ...
                            false, ...
                            false );
       
        % add the dim_red_FR (neurons) only
        stdata          = add_dim_red_data_to_single_trial_data( ...
                            stdata, ...
                            dim_red_FR ); 
                
    end
else

    % split the data in single trials
    stdata      = get_single_trial_data( bd, ...
                        {params.label}, ...
                        params.neural_chs, ...
                        params.chosen_emgs, ...
                        params.norm_trial_data, ...
                        params.w_i, ...
                        params.w_f );
end

